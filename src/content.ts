import grassVideo from "./assets/grass.mp4";
import odinVideo from "./assets/odin.mov"

export const Content = {
    // GPU Content
    grassContent: [grassVideo, "This is a small flowing grass simulation that I made using the Godot engine. I started by modeling a simple grass model in Blender, and then imported the file into my Godot project. From there, I used Godot's GPU Instancing Multi-Mesh Node to efficiently create tens of thousands of grass objects. I then used Godots built in shading language, to give the grass a gradient color, and some movement based on a flowing wind texture that moves across the surface of the grass plane. I then created a ground plane underneath the grass, and adjusted it to a height-map that I generated using Godot's Noise resource feature. The grass objects were then moved to sit on top of the ground object. The whole effect comes together very nicely."],
    odinRendererContent: [odinVideo, "This is a renderer that I built from scratch using the Odin programming language, and the Metal shading language. This project was built from the ground up with no prior knowledge of Odin or Metal and very little knowledge of GPU programming. I learned all about the rendering process from top to bottom, including creating pipelines, buffers, defining vertex and fragment shaders and more. This process also taught me about some of the techniques that go into simulating ocean water in Video Games. In this demo, I used a technique known as the Sum of Sines. This technique involves creating a large number of sine waves, and summing them up, which eventually creates a realistic looking water simulation. I also used more advanced techniques such as Fractional Brownian Motion and Domain Warping, which created an even sleeker look to the water. This project also taught me a lot about lighting models, and lighting characteristics like specular reflections. This project was an amazing entry into graphics programming, and built the foundation of the knowledge that I have today"],
    zigEngineGPUContent: [null, "This is a game engine that I am currently working on using the Zig programming language. My main goal for the GPU side of this engine is to learn about a range of graphics APIs including Vulkan, Metal and DX12. A big help to this project is the newly release SDL3.0 GPU API. SDL3 allows me to abstract all of the CPU-level code involved in the Graphics process to a cross-platform compatible codebase, which will save me from having to write the same pipeline definition multiple times. Currently the graphics implementation does not do much, as I am taking the time to learn the SDL3 GPU API, which is why I have left out a demo video. For more details on the CPU side of this engine, click over to the CPU side!"],

    zigEngineCPUContent: [null, "This is a game engine that I am currently working on using the Zig programming language. I chose this project, and the Zig language as a way to learn more about the low-level systems programming process. In this engine, my goal is to use a data-oriented programming style, which should help the engine run more efficiently. The Zig programming language is a language that does not include a lot of Object Oriented features that one would usually expect in a language used for Game Development. Because of this, the engine utilizes a ECS or Entity-Component-System model for interacting with data and game objects. Using Zig's comptime feature, developers are able to easily define Object and Component types, and then are able to hook into the low and high-level functionality of the system using Systems and Services. The engine then adds code at compile time that helps setup the initialization of each object and component. I will be writing more about the process of creating this engine in future blog posts!"],
    goNoteContent: [null, "This is a note-taking application that I built using the Go programming language. The application itself uses HTMX to handle interactivity, which then sends requests to the Go backend for updated HTML. This application includes Authentication using JSON Web Tokens, as well as a database to store notes using PostgreSQL. This project is unfortunately no longer hosted, but the code still exists on my github to be self-hosted! I learned a lot about the Go ecosystem, and Authentication strategies using JWTs in this project. I am very proud of the work I was able to achieve with it."],
    gleamValidationContent: [null, "This is my first foray into the Open Source library community. As a way to learn the Gleam programming language, I decided I would build a Data Validation library inspired by the decode JSON library written by the languages creator Louis Pilfold. The library uses a composable workflow to easily add rules to a validation function, which can then be run against data to make sure that it meets a set of rules layed out by the developer. This project taught me a lot about the Gleam ecosystem, including publishing your own package to the Gleam package management system."]
}